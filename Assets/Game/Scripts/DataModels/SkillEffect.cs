using UnityEngine;
using System.Collections;
using System.Collections.Generic;

public class SkillEffect
{
    // Modifiers for damages calculation
    public BasicStats StatsModifiers { get; set; }

    // Skill effect's affinities
    public Affinity Affinities { get; set; }

    // Targeting information
    public Targeting EffectTarget { get; set; }

    // How emity is calculated when the skill effect is applied
    public Const.EnmityTargetType EnmityType { get; set; }

    // Base enmity generated by the skill effect
    public int BaseEnmity { get; set; }

    // Bonuses added to character who uses the skill 
    public List<StatBonus> StatsBonues { get; set; }

    public SkillEffect()
    {
        StatsBonues = new List<StatBonus>();
    }

    public void AddStatBonus(Const.BasicStats stat, double magnitude, Const.StatBonusType bonusType)
    {
        if (this.StatsBonues == null)
        {
            this.StatsBonues = new List<StatBonus>();
        }

        // Let's not think about stacking this for now
        this.StatsBonues.Add(new StatBonus(stat, magnitude, bonusType));
    }

    public static SkillEffect MeleeAttackEffect()
    {
        var skillEffect = new SkillEffect();

        var modifier = new BasicStats();
        modifier.SetStat(Const.BasicStats.Attack, 1d);
        skillEffect.StatsModifiers = modifier;

        skillEffect.EffectTarget = Targeting.SingleOpponentTarget();

        var affinities = new Affinity();
        affinities.SetAffinity(Const.Affinities.Physical, 1d);
        skillEffect.Affinities = affinities;

        skillEffect.BaseEnmity = 10;
        skillEffect.EnmityType = Const.EnmityTargetType.Target;
        return skillEffect;
    }

    public static SkillEffect CrossSlashEffect()
    {
        var skillEffect = new SkillEffect();

        var modifier = new BasicStats();
        modifier.SetStat(Const.BasicStats.Attack, 2d);
        skillEffect.StatsModifiers = modifier;

        skillEffect.EffectTarget = Targeting.CrossOpponentTarget();

        var affinities = new Affinity();
        affinities.SetAffinity(Const.Affinities.Physical, 1d);
        skillEffect.Affinities = affinities;

        skillEffect.BaseEnmity = 15;
        skillEffect.EnmityType = Const.EnmityTargetType.Target;
        return skillEffect;
    }

    public static SkillEffect SquashEffect()
    {
        var skillEffect = new SkillEffect();

        var modifier = new BasicStats();
        modifier.SetStat(Const.BasicStats.Attack, 0.5d);
        skillEffect.StatsModifiers = modifier;

        skillEffect.EffectTarget = Targeting.SquashTarget();

        var affinities = new Affinity();
        affinities.SetAffinity(Const.Affinities.Physical, 1d);
        skillEffect.Affinities = affinities;

        skillEffect.BaseEnmity = 30;
        skillEffect.EnmityType = Const.EnmityTargetType.Target;
        return skillEffect;
    }

    public static SkillEffect ChainLightning()
    {
        var skillEffect = new SkillEffect();

        var modifier = new BasicStats();
        modifier.SetStat(Const.BasicStats.Wisdom, 2d);
        skillEffect.StatsModifiers = modifier;

        skillEffect.EffectTarget = Targeting.ChainLightning();

        var affinities = new Affinity();
        affinities.SetAffinity(Const.Affinities.Lightning, 1d);
        skillEffect.Affinities = affinities;

        skillEffect.BaseEnmity = 40;
        skillEffect.EnmityType = Const.EnmityTargetType.Target;

        skillEffect.AddStatBonus(Const.BasicStats.Accuracy, 1d, Const.StatBonusType.Absolute);

        return skillEffect;
    }

    public static SkillEffect ChainLightningSecondary()
    {
        var skillEffect = new SkillEffect();

        var modifier = new BasicStats();
        modifier.SetStat(Const.BasicStats.Wisdom, 1d);
        skillEffect.StatsModifiers = modifier;

        skillEffect.EffectTarget = Targeting.ChainLightningSecondary();

        var affinities = new Affinity();
        affinities.SetAffinity(Const.Affinities.Lightning, 1d);
        skillEffect.Affinities = affinities;

        skillEffect.BaseEnmity = 20;
        skillEffect.EnmityType = Const.EnmityTargetType.Target;

        skillEffect.AddStatBonus(Const.BasicStats.Accuracy, 1d, Const.StatBonusType.Absolute);

        return skillEffect;
    }

    public static SkillEffect MinorHealEffect()
    {
        var skillEffect = new SkillEffect();

        var modifier = new BasicStats();
        modifier.SetStat(Const.BasicStats.Mind, 3d);
        skillEffect.StatsModifiers = modifier;

        skillEffect.EffectTarget = Targeting.SingleTarget();

        var affinities = new Affinity();
        affinities.SetAffinity(Const.Affinities.Healing, 1d);
        skillEffect.Affinities = affinities;

        skillEffect.BaseEnmity = 40;
        skillEffect.EnmityType = Const.EnmityTargetType.All;

        skillEffect.AddStatBonus(Const.BasicStats.Accuracy, 1d, Const.StatBonusType.Absolute);

        return skillEffect;
    }
}
